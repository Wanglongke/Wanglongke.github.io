---
layout: post
title:  APA-IEEE754-2008浮点数
date:   2024-07-10 15:30:00 +0300
tags:   ArbitraryPrecisionArthmetic
description:  高精度计算
---

# [IEEE 754-2008 二进制表示](#IEEE-754-2008-二进制表示)

32位浮点数和64位浮点数是根据**IEEE 754-2008**标准进行设计的。

## [32位浮点数](#32位浮点数)

32位浮点数的二进制形式：  

![]({{ site.baseurl }}/images/apa-001.png)

第31位存储符号，**0**表示非负，**1**表示负。  
第23~30位共8位表示非负整数，$b=e+127$, $-127 \le e \le 128$    
第0~22位共23位表示尾数
```cpp
union binary32
{
	uint32_t encoding;
	float number;
};

constexpr binary32 F32_0_DOT_0{ 0u };
constexpr binary32 F32_0_DOT_5{ 1056964608u };
constexpr binary32 F32_1_DOT_0{ 1065353216u };
constexpr binary32 F32_2_DOT_0{ 1073741824u };

void test()
{
	binary32 x{};
	x.number = 1.25f;
	uint32_t s = (0x80000000 & x.encoding) >> 31;
	uint32_t b = (0x7f800000 & x.encoding) >> 23;
	uint32_t t = (0x007fffff & x.encoding);
	if (b == 0) 
	{
		if (t == 0) // zeros
		{
			// x = (-1)^s * 0 [allows for +0 and -0] 
		}
		else  //subnormal numbers
		{
			// x = (-1)^s * 0.t * 2^{-126}
		}
	}
	else if (b < 255)
	{
		// x = (-1)^s * 1.t * 2^{b-127}
	}
	else
	{
		if (t == 0)
		{
			// x = (-1)^s * infinity
		}
		else
		{
			if (t & 0x00400000)
			{
				// x = quiet NaN
			}
			else
			{
				// x = sigaling NaN
			}
			// payload = t & 0x003fffff
		}
	}

	// binary32 tb32{}; tb32.encoding = t;
	// binary32 ONE_DOT_T{};
	// ONE_DOT_T.encoding = tb32.encoding + F32_1_DOT_0.encoding;
	// float z = ((s%2==0)?1.f:-1.f) * (ONE_DOT_T.number) * std::powf(2.f, b - 127);
	// z = 1.25
}
```

## [64位浮点数](#64位浮点数)

64位浮点数的二进制形式：  

![]({{ site.baseurl }}/images/apa-002.png)

第63位存储符号，0表示非负，1表示负。
第52~62位共11位表示非负整数，$b=e+1023$, $-1023 \le e \le 1024$   
第0~51位共52位表示尾数
```cpp
union binary64
{
	uint64_t encoding;
	double number;
};

constexpr binary64 F64_0_DOT_0{ 0lu };
constexpr binary64 F64_0_DOT_5{ 4602678819172646912lu };
constexpr binary64 F64_1_DOT_0{ 4607182418800017408lu };
constexpr binary64 F64_2_DOT_0{ 4611686018427387904lu };

void test()
{
	binary64 x{};
	x.number = 1.25;
	uint64_t s = (0x8000000000000000 & x.encoding) >> 63;
	uint64_t b = (0x7ff0000000000000 & x.encoding) >> 52;
	uint64_t t = (0x000fffffffffffff & x.encoding);
	if (b == 0)
	{
		if (t == 0) // zeros
		{
			// x = (-1)^s * 0 [allows for +0 and -0]
		}
		else // subnormal numbers
		{
			// x = (-1)^s * 0.t * 2^{-1022}
		}
	}
	else if (b < 2047) // normal numbers
	{
		// x = (-1)^s * 1.t * 2^{b-1023}
		binary64 ONE_DOT_T{};
		ONE_DOT_T.encoding = tb64.encoding + F64_1_DOT_0.encoding;
		double z = ((s % 2 == 0) ? 1.0 : -1.0) * (ONE_DOT_T.number) * std::pow(2.0, b - 1023);
		std::cout << z << std::endl;
	}
	else // special numbers
	{
		if (t == 0)
		{
			// x = (-1)^s * infinity
		}
		else
		{
			if (t & 0x0008000000000000)
			{
				// x = quiet NaN
			}
			else
			{
				// x = signaling NaN
			}
			// payload = t & 0x0007ffffffffffff
		}
	}

	// binary64 tb64{}; tb64.encoding = t;
	// binary64 ONE_DOT_T{};
	// ONE_DOT_T.encoding = tb64.encoding + F64_1_DOT_0.encoding;
	// double z = ((s % 2 == 0) ? 1.0 : -1.0) * (ONE_DOT_T.number) * std::pow(2.0, b - 1023);
	// z = 1.25
}
```



