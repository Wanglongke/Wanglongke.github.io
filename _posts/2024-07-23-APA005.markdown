---
layout: post
title:  APA-浮点数与科学二进制的转换
date:   2024-07-23 15:30:00 +0300
tags:   ArbitraryPrecisionArthmetic
description:  高精度计算
---

# [浮点数到科学二进制的转换](#浮点数到科学二进制的转换)

接下来将描述"float"到科学二进制的转换。对于"double"类型，其过程相似。可以使用模板来处理不同的浮点类型。    
浮点数的小数部分为$0.t*2^{-126}$表示, 其中$t>0$是其23-bit的尾数。设$f$是其首1-bit的索引，设$l$是其尾1-bit的索引，则$t$就有$f-l+1$位，指数$b=-149+l$因此$0.t*2^{-126}= \hat{u} * 2^{p}$其中$u=t_{f}t_{f-1}...t_{l}$其中$p=-149+f$.   

"subnormal float to BSNumber"伪代码如下：
```cpp
float subnormal;
BSNumber bsn;
uint32_t s = subnormal.GetSign();
uint32_t e = subnormal.GetBiasedExponent();   // e=0 for subnormals
uint32_t t = subnormal.GetTrailingSignificand();
int32_t last = GetTrailingBit(t);
int32_t diff = 23 - last;
bsn.sign = (s>0 ? -1: 1);
bsn.biasedExponent = -126 - diff;
bsn.uinteger = (t>>last);
```
"normal float to BSNumber"伪代码如下：
```cpp
float normal;
BSNumber bsn;
uint32_t s = normal.GetSign();
uint32_t e = normal.GetBiasedExponent(); // 0 < e < 255 for normals
uint32_t t = normal.GetTrailingSignificand();
if(t>0)
{
    int32_t last = GetTrailingBit(t);
    int32_t diff = 23 - last;
    bsn.sign = (s>0 ? -1: 1);
    bsn.biasedExponent = e - 127 - diff;
    bsn.uinteger = ((t | (1<<23)) >> last); 
}
else
{
    bsn.sign = (s>0 ? -1: 1);
    bsn.biasedExponent = e - 127;
    bsn.uinteger = 1;
}
```
"infinity or NaN float to BSNumber"伪代码如下:
```cpp
float special;   // infinity, NaN
BSNumber bsn;
uint32_t s = special.GetSign();
uint32_t e = special.GetBiasedExponent();       // e=255 for specials
uint32_t t = special.GetTrailingSignificand();   
if(t==0)   // infinities
{
    // warning: input is an infinity
    bsn.sign = (s>0 ? -1: 1);
    bsn.biasedExponent = 128;
    bsn.uinteger = 1;
}
else
{
    // Error: input is a NaN(quiet or silent)
    bsn.sign = 0;
    bsn.biasedExponent = 0;
    bsn.uinteger = 0;
}
```

# [科学二进制到浮点数的转换](#科学二进制到浮点数的转换)

由于"BSNumber"的运算会产生多于24-bit尾数的精度，这里选择在其转换为浮点数的时候，采用"round-to-nearest"和"ties-to-even"策略。    

实数轴上浮点数的表示如下:   
![]({{ site.baseurl }}/images/apa-001.jpg)  

“underflow”意味着浮点数无法表示，其范围为$(0, 2^{-149})$.   
"subnormals"的范围为$[2^{-149}, 2^{-126})$.   
"normals"的范围为$[2^{-126}, 2^{128})$.    
"overflow"范围为$(2^{128}, \infty)$, 其也不能表示为浮点数。   
数$0.0_{-22}1*2^{-126}=2^{-149}$是最小的“subnormal”. 其中$0_{-22}$表示$0$重复$22$次。    
数$0.1_{-23}*2^{-126}$是最大的"subnormal".     
数$2^{-126}$是最小的"normal".    
数$1.1_{-23}*2^{127}$是最大的"normal".   

设$x$是BSNumber, 其位于$[0, 2^{-149})$之间。如果$x<=2^{-150}$成立，我们取值到零。如果$x>2^{-150}$成立，我们取值到$2^{-149}$.     

伪代码如下：
```cpp
BSNumber bsn;    // assume bsn is not zero
uint32_t s = (bsn.sign < 0 ? 1: 0);
uint32_t e;      // biased exponent for float
uint32_t t;      // trailing significand for float
int32_t p = bsn.GetExponent();        // biasedExponent + numBits - 1
if(p<-149)
{
    if(p<-150 || bsn.uinteger==1)
    {
        // round to 0(when bsn.uinteger is 1, this is a tie, so round to even)
        e = 0;
        t = 0;
    }
    else
    {
        // round to 2^{-249}
        e = 0;
        t = 1;
    }
}
// else: other case s discussed later
float result = CreateIEEEFloat(s, e, t);   // as uint32_t, (s<<31) | (e<<23)) |t
```
设$x=1.u*2^{p}$是BSNumber, 其位于$[2^{-149}, 2^{-126})$之间，那么$-149<=p<-126$.        

$$x=(0.1u*2^{-\sigma})*2^{-126} = 0.0_{-|\sigma|}1u*2^{-126} = 0.\hat{t} * 2^{126}$$

其中$\sigma=-(p+127)\in \{0,...,22\}$且$\hat{t}=0_{-|\sigma|}1u$是一个整数，且$\hat{u}=1u$.   

我们需要从$\hat{t}$获取其前23-bit从而可以得到"subnormal"$y=0.t*2^{-126}$.    

我们也可以提取$\hat{t}$前24-bit. 如果我们取其前23-bit, 则"subnormal"$y$是截断的。     

然而我们需要对其进行"round-to-nearest-ties-to-even". 一般的，对非负数$i.f$进行“round”模式，其中$i$是整数部分，$f$是小数部分。如果$f< 1/2$成立，则取整到$i$即舍掉小数部分。如果$f>1/2$怎取整到$i+1$即入到整数。当$f=1/2$成立，如果$i$是偶数则舍掉小数，如果$i$是奇数则入到整数。这个逻辑的核心就是比较$f$和$1/2$的大小。因此我们这里取前23-bit作为整数部分，取额外1-bit进行判断，如果额外的1-bit不是最后一位，是0则舍，是1则入，因为最后一位是1. 如果是最后一位，这里就需要判断前一位，是0则舍，是1则入.    

$$
\begin{array}{c|c|c|c}
\sigma & 0.\hat{t}  & \text{bit to extract} & \text{prefix index of}  \\
       &            & \text{from } \hat{u}  & \text{first bit of } f  \\
\hline 
0      & 0.1u       & 24                    & 8                       \\
1      & 0.01u      & 23                    & 9                       \\
2      & 0.001u     & 22                    & 10                      \\
.      & .          & .                     & .                       \\     
.      & .          & .                     & .                       \\     
.      & .          & .                     & .                       \\     
22     & 0.00000000000000000000001u &2      & 30                      \\
\hline         

\end{array}
$$

伪代码如下：
```cpp
BSNumber bsn;          // assume bsn is not zero
uint32_t s = (bsn.sign < 0 ? 1 : 0);
uint32_t e;            // biased exponent for float
uint32_t t;            // trailing significand for float
int32_t p = bsn.GetExponet();        // biasedExponent + numBits - 1
if(-149<=p && p<-126)
{
    int32_t sigma = -(p + 127);
    t = bsn.GetSubnormalTrailing(sigma);
    if(t & (1 << 23))
    {
        // the first 23 bits of hat{u} were all 1 and the remaing bits
        // led to rounding up, so round up to the minimum normak.
        e = 1;
        t = 0;
    }
    else
    {
        e = 0;
    }
}
// else: other cases discussed later
float result = CreateIEEEFloat(s, e, t);    // as uint32_t, (s<<31) || (e<<23) | t
```





