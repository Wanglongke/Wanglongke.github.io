---
layout: post
title:  奇异递归模式-CRTP
date:   2024-04-09 15:30:00 +0300
tags:   设计模式
description:  cpp奇异递归模式
---

# [基本说明](#基本说明)

奇异递归模式(Curiously Recurring Template Pattern, CRTP), 是cpp模板编程时的一种模板使用方式，即把派生类作为基类的模板参数。更一般的称作F-bound polymorphism，这出自于1989年的这篇论文，“F-bounded polymorphism for object-oriented programming”.

## [什么是CRTP](#什么是CRTP)
CRTP将派生类作为基类的模板参数，允许重写基类的方法，从而实现多态。它多态的实现发生在编译器，因此称为静态多态。   
CRTP的实现通常如下：   
```cpp
template<typename Derived> 
class Base{
    ...
    void f(){
        static_cast<Derived*>(this)->f();
    }
};

class Derived: public Base<Derived>{
    ...
    void f(){

    }
};
```

## [CRTP的优缺点](#CRTP的优缺点)
CRTP通过继承实现了**静态**多态，相对于使用虚函数的多态，其性能更好。通过测试虚函数的调用耗时大约是非虚的静态多态的9~10倍
## [CRTP的诸多细节](#CRTP的诸多细节)

### [禁止套娃](#禁止套娃)

示例1：
```cpp
template<typename C>
struct B
{
    typedef typename C::value_type value_type;
    value_type* p_;
};


struct D : B<D>
{
    using value_type = float;
};

int main()
{
    D d{};
    return 0;
}

```
上述代码编译会失败(MSVC)
```
C2039  "value_type": 不是"D"的成员
C3646  "value_type": 未知重写说明符
C4430  "..."
```

示例2：
```cpp
template<typename D> 
class B
{
public:
    ...
    void f(){
        static_cast<D*>(this)->f();
    }
};

class D: public B<D>{
    // 派生类没有f的实现
};
```
上述代码编译期不会失败，也不会产生警告，错误发生在运行期，错误如下：
```cpp
Stack overflow 
```
也有人会出现以下错误：
```cpp
Process finished with exit code 139 (interruoted by signal 11: SIGSEGV)
```

### [析构](#析构)

如下错误示例：
```cpp
B<D> *b = new D;
...
delete b;
```
上述代码无法调用D类的析构，可以编译通过，运行不报错，会造成D类无法析构，内存泄漏。

```cpp
template<typename D>
class B
{
public:

    B() {
        std::cout << "B call construction" << std::endl;
    }

    ~B() {
        std::cout << "B call deconstruction" << std::endl;
    }

    void f() {
        std::cout << "B call function f" << std::endl;
        static_cast<D*>(this)->f();
    }
};

class D : public B<D> {

public:

    D() {
        std::cout << "D call construction" << std::endl;
    }

    ~D() {
        std::cout << "D call deconstruction" << std::endl;
    }

    void f() {
        std::cout << "D call function f" << std::endl;
    }
};


int main(int argc, char* argv[])
{
    B<D>* b = new D;
    b->f();
    delete b;
    return 0;
}
```

其运行结果如下：
```cpp
B call construction
D call construction
B call function f
D call function f
B call deconstruction
```
解决方法如下：   
1. 写一个函数负责析构
```cpp
template<typename D>
void Destroy(B<D>* b){
    delete static_cast<D*>(b);
}
```
2. 使用虚析构函数

### [权限](#权限)

CRTP需要所调用的函数都是可访问的，这个可访问有两种方式可以实现。其一，函数是公共函数；其二，设置友元。    
公共函数在前面已经体现过了。下面是友元的示例：
```cpp
template<typename D>
class B
{
public:
    void f(){
        static_cast<D*>(this)->f_impl();
    }
private:
    void f_impl(){
        std::cout << "B f_impl call" << std::endl;
    };
};

class D: public B<D>
{
private:
    void f_impl(){

    }
    friend class B<D>;   //没有此句编译失败
};
```

## [CRTP作为委托模式](#CRTP作为委托模式)

当使用CRTP静态多态的功能时，基类定义了接口，派生类负责实现，这种称为**静态接口**。    

当直接使用派生类时，基类不再是接口，派生类也不仅仅是接口的实现。派生类**扩展**了基类接口，同时基类**委托**了一些行为给派生类。    

### [扩展接口](#扩展接口)

通过operator==()实现operator!=()      

```cpp
template<typename D>
struct not_equal{
    bool operator!=(const D&rhs) const {
        return !static_cast<const D*>(this)->operator==(rhs);}
    }
};

class C: public not_equal<C>{
    int i_;
public:
    C(int i): i_(i){}
    bool operator==(const C &rhs) const{
        return i_==rhs.i_;
    }
};
```

或者可以对两个入参进行比较，这种情况下需要访问类的私有成员函数，需要将operator==设置为友元函数。
```cpp
template<typename D>
struct not_equal
{
    friend bool operator!=(const D&lhs, const D& rhs)
    {
        return !(lhs==rhs);
    }
};

class C: public not_equal<C>
{
private:
    int i_;
public:
    C(int i): i_(i){

    }
    friend bool operator==(const C& lhs, const C& rhs){
        return lhs.i_==rhs.i_;
    }
};

class D: public not_equal<D>
{
private:
    int i_;
public:
    D(int i): i_(i){}
    // struct not_equal 直接使用了D的类型，它无法通过一个指向
    // not_equal<D>的指针访问自己
    bool operator==(const D& rhs)const{
        return i_ == rhs.i_;
    }
};
```
### [实现对象注册](#实现对象注册)

通常出于调试目的，我们需要知道某种类型当前产生了多少实例对象，产生一个维护此对象的一个列表。
```cpp
template<typename D>
class registry
{
public:
    static size_t count;
    static D* head;
    D* prev;
    D* next;
protected:
    registry()
    {
        ++count;
        prev = nullptr;
        next = head;
        head = static_cast<D*>(this);
        if(next){
            next->prev = head;
        }
    }

    registry(const registry &)
    {
        ++count
        prev = nullptr;
        next = head;
        head = static_cast<D*>(this);
        if(next){
            next->prev = head;
        }
    }

    ~registry()
    {
        --count;
        if(prev){
            prev->next = next;
        }
        if(next){
            next->prev = prev;
        }
        if(head==this){
            head = next;
        }
    }
};
template <typename D> size_t registry<D>::count(0);
template <typename D> D * registry<D>::head(nullptr);
```

这里用protected关键字将构造与拷贝函数保护起来，强制使用派生类来注册对象。用静态变量来进行派生类型的计数，用双向链表来记录所有的派生类型，用静态变量维护一个唯一的链表头。

### [访问者](#访问者)








