---
layout: post
title:  APA-无符号整数计算
date:   2024-07-12 15:30:00 +0300
tags:   ArbitraryPrecisionArthmetic
description:  高精度计算
---

# [无符号整数计算](#无符号整数计算)

二进制科学计数的乘法，加法，减法的计算，最后都转换为确定符号和指数的计算，以及最核心的部分任意位数的无符号整数的计算。    

对于任意位数的整数的计算，需要处理整数的进位与溢出。一个经典的计算N-bit整数的实现，是将计算嵌入进2N-bit的计算。接下来我们假定CPU支持64-bit无符号整型(uint64_t)计算，其包含在头文件<cstdint>. 我们可以将无符号整数表示为:     

$$\hat{u}=\sum_{i=0}^{i_{max}-1} u_{i}(2^{32})^{i} \qquad \hat{v}=\sum_{j=0}^{j_{max}-1} v_{j}(2^{32})^{j}$$

其中$u_{i},v_{j}$是32-bit无符号整数。

## [加法](#加法)

加法计算的样例如下，假设$i_{max}=3,j_{max}=2$，左侧是确切例子，右侧是一般化例子：         

$$
\begin{array}{cccc} 
1 & 1 & 0 &   \\
\hdashline
  & 9 & 2 & 5 \\
  &   & 8 & 3 \\
\hline
1 & 0 & 0 & 8 
\end{array}  
\qquad
\begin{array}{cccc}
c_{3} & c_{2} & c_{1} &        \\
\hdashline
      & u_{2} & u_{1} & u_{0}  \\
      &       & v_{1} & v_{0}  \\
\hline
w_{3} & w_{2} & w_{1} & w_{0}  
\end{array}
\qquad
\begin{array}{c}
\textrm{carry bits}        \\
\hat{u}           \\
\hat{v}           \\
\hat{u} + \hat{v}
\end{array}
$$   

对于第一项没有进位即$c_{0}=0$, 对于“uint32_t”的运算

$$p_{0}=u_{0}+v_{0}+c_{0}$$

最坏的情况下$p_{0}$成为“uin64_t”, 当其大于$2^{32}$         

低位的32位提取出来作为

$$w_{0}=Low(p_{0})$$ 

高位的32位提取出来作为进位

$$c_{1}=High(p_{0})$$. 

对下一个$u_{i}$重复这个过程。     

伪代码如下， 假定$i_{max}>=j_{max}$.  
```cpp
// inputs
int32_t imax, jmax;
uint32_t u[imax], v[jmax];
// outputs
int32_t kmax = imax + 1;
uint32_t upv[kmax];
uint64_t carry = 0;
uint64_t sum;
int32_t i, j;
for(j=0; j<jmax; ++j)
{
  sum = u[j] + (v[j] + carry);
  upv[j] = (uint32_t)(sum & 0x00000000FFFFFFFF);
  carry = (sum>>32);
}

// we have no more v-blocks. propagate the carry-out    
// if there is noe or copy the remaining blocks if there is not.
if(carry > 0)
{
  for(i=jmax; i<imax; ++i)
  {
    sum = u[i] + carry;
    upv[i] = (uint32_t)(sum & 0x00000000FFFFFFFF);
    carry = (sum>>32);
  }
  if(carry>0)
  {
    upv[i] = (uint32_t)(carry & 0x00000000FFFFFFFF);
  }
}
else
{
  for(i=jmax; i<imax; ++i)
  {
    upv[i] = u[i];
  }
}

```

## [减法](#减法)  

对于减法$\hat{u}-\hat{v}$, 其中假设$\hat{u}>\hat{v}>0$, 那么减法可以转换为$\hat{u}+(\sim\hat{w}+1)$, 其中$\hat{w}$与$\hat{v}$相等，且与$\hat{u}$有相同的位数，这需要在$\hat{v}$左侧补一定数量的$0$.   

然后按位取反即$\sim \hat{w}$. 由于$\hat{v}\neq 0$, 所以$\hat{w}\neq 0$, 那么$\sim \hat{w}$不会所有位等于1，那么$\sim \hat{w}+1$不会有进位。计算加法$\hat{u}+(\sim \hat{w} + 1)$ 可能会产生进位，但是这个进位与结果无关可以忽略掉。   

伪代码如下，假定$i_{max}>=j_{max}$.  
```cpp
// inputs
int32_t imax, jmax;
uint32_t u[imag], v[jmax];

//outputs
int32_t kmax = imax + 1;   // = max(imax, jmax) + 1
uint32_t umv[imax];        // u - v

// Create the two's-complement number compV[] from v[]. Firstly negate   
// the bits; secondly add 1.
uint32_t compV[imax];
uint64_t carry, sum;
int32_t i;
for(i=0; i<jmax; ++i)
{
  compV[i] = ~v[i];
}
for(/**/; i<imax; ++i)
{
  compV[i] = 0xFFFFFFFF;
}
carry=1;
for(i=0; i<jmax; ++i)
{
  sum = compV[i] + carry;
  compV[i] = (uint32_t)(sum & 0x00000000FFFFFFFF);
  carry = (sum>>32);
}
// Add the numbers as positive intergers. Set the last block to zero int    
// case no carry-out occurs
umv[imax-1] = 0;
carry = 0;
for(i=0; i<imax; ++i)
{
  sum = compV[i] + (u[i]+carry);
  umv[i] = (uint32_t) (sum & 0x00000000FFFFFFFF);
  carry = (sum>>32);
}

```

## [乘法](#乘法)

乘法运算示意如下，假设$i_{max}=0,j_{max}=2$计算$\hat{w}=\hat{u}*\hat{v}$.     

$$\begin{array}{cccc} 
2 & 1 & 3 &   \\
\hdashline
  & 3 & 2 & 5 \\
  &   &   & 7 \\
\hline
2 & 2 & 7 & 5 
\end{array}  
\qquad
\begin{array}{cccc}
c_{3} & c_{2} & c_{1} &        \\
\hdashline
      & v_{2} & v_{1} & v_{0}  \\
      &       &       & u_{0}  \\
\hline
w_{3} & w_{2} & w_{1} & w_{0}  
\end{array}
\qquad
\begin{array}{c}
\textrm{carry bits}        \\
\hat{v}           \\
\hat{u}           \\
\hat{u} * \hat{v}
\end{array}
$$   

当$i_{max}=1$, 计算方式如下。      

$$\begin{array}{ccccc} 
  & 1 & 1 & 2 &   \\
\hdashline
  & 2 & 1 & 3 &   \\
\hdashline
  &   & 3 & 2 & 5 \\
  &   &   & 5 & 7 \\
\hline 
0 & 0 & 1 &   &   \\
\hdashline
  & 2 & 2 & 7 & 5 \\
1 & 6 & 2 & 5 &   \\
\hline
1 & 8 & 5 & 2 & 5 \\
\end{array}  
\qquad
\begin{array}{ccccc}
      & d_{3} & d_{2} & d_{1} &        \\
\hdashline
      & c_{3} & c_{2} & c_{1} &        \\
\hdashline
      &       & v_{2} & v_{1} & v_{0}  \\
      &       &       & u_{1} & u_{0}  \\
\hline
e_{3} & e_{2} & e_{1} &       &        \\
\hdashline
      & w_{3} & w_{2} & w_{1} & w_{0}  \\
q_{3} & q_{2} & q_{1} & q_{0} &        \\
\hline
s_{4} & s_{3} & s_{2} & s_{1} & s_{0}
\end{array}
\qquad
\begin{array}{c}
\textrm{Carry bits for} \quad \hat{q}=u_{1} * \hat{v}   \\
\textrm{Carry bits for} \quad \hat{w}=u_{0} * \hat{v}   \\
\hat{v}           \\
\hat{u}           \\
\textrm{Carry bits for} \quad \hat{w}+\hat{q} * 2^{32}   \\
\hat{w} = \hat{u}_{0} * \hat{v}      \\
\hat{q} = u_{1} * \hat{v}            \\
\hat{u} * \hat{v}
\end{array}
$$  

伪代码如下：
```cpp
// inputs
int32_t imax, jmax;
uint32_t u[imag], v[jmax];
// outputs
int32_t kmax = imax + jmax;
uint32_t utv[kmax+1]; // u* v
SetToZero(utv, kmax); // uv is the accumulator of u[i] * v;
uint32_t product[kmax];
for(i=0; i<imax; ++i)
{
  // Compute the product p = u[i] * v.
  uint64_t uBlock = u[i], carry=0;
  int32_t i1, i2;
  for(j=0, k=i; j<jmax; ++j, ++k)
  {
    uint64_t vBlock = v[j];
    uint64_t term = uBlock * vBlock + carry;
    product[k] = (uint32_t)(term & 0x00000000FFFFFFFF);
    carry = (term >> 32);
  }
  if(k<kmax)
  {
    product[k] = (uint32_t) carry;
  }
  // Add p to the accumulator uv.
  uint64_t sum;
  carry = 0;
  for(j=0, k=i; j<jmax; ++j, ++k)
  {
    sum = product[k] + (utv[k] + carry);
    utv[k] = (uint32_t)(sum & 0x00000000FFFFFFFF);
    carry = (sum>>32);
  }
  if(k<kmax)
  {
    sum = product[k] + carry;  // utv[k]==0 is guaranteed
    utv[k] = (uint32_t)(sum & 0x00000000FFFFFFFF);
  }
}
```

## [位运算-左移](#位运算-左移)

加法运算与减法运算都包含计算$\hat{v}=\hat{u}*2^{\sigma}$, 其中$\hat{u}$是一个奇数，且$\sigma > 0$, 这等价于对$\hat{u}$进行位左移$\sigma$位。      

下面为示例。设$\hat{u}$=0x08192A3B4C5D6E7F8, $\sigma=40$. $\hat{u}$需要两个32-bit的空间来存储，其有60位，首1-bit索引是59. 尾1-bit索引是0. 其左移$\sigma$位，那么首1-bit索引变为99，所以$\hat{v}$需要四个32-bit的空间来存储。且$\hat{v}$尾部32-bit全为0，因为$\sigma / 32 = 1$(整数除法); 因此$v[0]=0$. 

$$
\begin{array}{c|c|c|c}
         &          &    u[1]  &   u[0]    \\
         &          &          &           \\
         &          & 08192A3B & 4C5D6E7F  \\
         &          &          &           \\
00000008 & 192A3B4C & 5D6E7F00 & 00000000  \\
         &          &          &           \\
   v[3]  &   v[2]   &    v[1]  &   v[0]    
\end{array}
$$


伪代码如下：
```cpp
// inputs
int32_t numUBits = <number of bits of u>;
int32_t numShiftedUBits = numUBits + shift;
int32_t imax = 1 + (numUBits - 1) / 32;
uint32_t u[imax];

// outputs
int32_t jmax = 1 + (numShiftedUBits - 1) / 32;
uint32_t shiftedU[jmax];             // (u<<shift)
// Set the low-order bits to zero.
int32_t shiftBlock = shift / 32;
int32_t i, j;
for(j=0; j<shiftBlock; ++j)
{
  shiftedU[j] = 0;
}
// Get the index of the trailing 1-bit within the result.
int32_t leftShift = shift % 32;
if(leftShift > 0)
{
  // The trailing 1-bits for source and target are at different relative  
  // indices. Each shifted source block straddles a boundary between two 
  // target blocks, so we must extract the subblocks and copy accordingly.
  int32_t rightShift = 32 - leftShift;
  uint32_t previous = 0;
  for(j = shiftBlock, i=0; i<imax; ++j, ++i)
  {
    uint32_t current = u[i];
    shiftedU[i] = (current << leftShift) | (previous >> rightShift);
    prev = current;
  }
  if(j<jmax)
  {
    // The leading 1-bit of the source is at a relative index such that 
    // when you left-shift, that bit occurs in a new block.
    shiftedU[j] = (previous >> rightShift);
  }
}
else
{
  // The trailing 1-bits for source and target are at the same relative
  // index. The shift reduces to a block copy.
  for(j=shiftBlock, i=0; i<imax; ++j, ++i)
  {
    shiftedU[j] = u[i];
  }
}
```
## [位运算-右移为奇数](#位运算-右移为奇数)

加法和减法的计算中包含计算两个奇数的和或差。这两个运算的和都为偶数，我们需要把结果右移一些位使得其成为一个奇数，我们也需要计算科学二进制数数的指数值。    
上一个位左移的例子也可以用来表示位右移，此时$\hat{v}$为输入，$\hat{u}$为输出。    
尾代码如下：
```cpp
// inputs
int32_t numUBits =<number of bits of u>;
int32_t imax = 1 + (numUBits - 1) / 32;
uint32_t u[imax];
// Get the leading 1-bit.
int32_t firstBitIndex = 32 * (imax - 1) + GetLeadingBit(u[imax-1]);
// Get the trailing 1-bit
int32_t i, j, lastBitIndex;
for(i=0; i<max; ++i)
{
  if(u[i]>0)
  {
    lastBitIndex = 32 * i + GetTailingBit(u[i]);
    break;
  }
}
// outputs
int32_t numShiftedUBits = firstBitIndex - lastBitIndex + 1;
int32_t jmax = 1 + (numShiftedUBits - 1) / 32;
uint32_t shiftedU[jmax];    // (u<<shift)
int32_t shift;

self.SetNumBits(firstBitIndex - lastBitIndex + 1);
auto & bits = self.GetBits();
int32_t const numBlocks = self.GetSize();
// Get the location of the low-order 1-bit within the result.
int32_t shiftBlock = lastBitIndex % 32;
int32_t rshift = lastBitIndex % 32;
if(rshift > 0)
{
  int32_t lshift = 32 - rshift;
  i = shiftBlock;
  uint32_t curr = u[i++];
  for(j=0; i<imax; ++j, ++i)
  {
    uint32_t next = u[i];
    shiftedU[j] = (curr >> rshift) | (next << lshift);
    curr = next;
  }
  if(j < jmax)
  {
    shiftedU[j] = (curr >> rshift);
  }
}
else
{
  for(j=0, i=shiftBlock; j < jmax; ++j, ++i)
  {
    shiftedU[j] = u[i];
  }
}
shift = rshift + 32 * shiftBlock;
```

## [比较运算](#比较运算)

判断两数是否相等，伪代码如下：

```cpp
bool Equal(UInteger u[imax], UInteger v[jmax])
{
  if(u.numBits != v.numBits)
  {
    return false;
  }
  if(u.numBits > 0)
  {
    for(int32_t i=imax-1; i>=0; --i)
    {
      if(u[i]!=v[i])
      {
        return false;
      }
    }
  }
  return true;
}
```
判断一个数是否小于另一个数：
```cpp
bool LessThan(UInteger u[imax], UInteger v[jmax]) const
{
  if(u.numBits > 0 && v.numBits > 0)
  {
    // the numbers must be compared as if their leading 1-bits are aligned.
    int bitIndex0 = u.numBits - 1;
    int bitIndex1 = v.numBits - 1;
    int block0 = bitIndex0 / 32;
    int block1 = bitIndex1 / 32;
    int numBlockBits0 = 1 + (bitIndex0 % 32);
    int numBlockBits1 = 1 + (bitIndex1 % 32);
    uint64_t n0shift - u[block0];
    uint64_t n1shift = v[block1];
    while(block0>=0 && block1>=0)
    {
      // shift the bits in the leading blocks to the high-order bit.
      uint32_t value0 = 
        (uint32_t)((n0shift << (32-numBlockBits0)) & 0x00000000FFFFFFFF);
      uint32_t value1 = 
        (uint32_t)((n1shift << (32-numBlockBits1)) & 0x00000000FFFFFFFF);
      // shift bits in the next block (if any) to fill the current block
      if(--block0>=0)
      {
        n0shift = bits[block0];
        value0 |= 
          (uint32_t)((n0shift >> numBlockBits) & 0x00000000FFFFFFFF);
      }
      if(--block1>=0)
      {
        n1shift=nBits[block1];
        value1 |= 
          (uint32_t)((n1shift >> numBlockBits1) & 0x00000000FFFFFFFF);
      }
      if(value0<value1)
      {
        return true;
      }
      if(value0>value1)
      {
        return false;
      }
    }
    return block0 < block1;
  }
  else
  {
    // one or both numbers are negative. The only time 'less than' is 'true' is when v is positive.
    return (v.numBits > 0);
  }
}
```


