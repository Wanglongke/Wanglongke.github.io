---
layout: post
title:  APA-高精度计算
date:   2024-01-01 15:30:00 +0300
tags:   APA
description:  高精度计算
---

# [基本说明](#基本说明)

Arbitrary Precision Arthmetic(APA)   

在解决几何问题的过程中使用浮点数计算并不总是符合算法预期的，我们所要求的计算精度的鲁棒性当前的浮点数会不满足，如IEEE 754-2008标准定义了32位和64位浮点数，即使已经有24位和53位的计算精度。下面介绍几个样例：

# [样例](#样例)

## [样例1](#样例1)

计算点$P$是否位于一个2D的凸多边形内，多边形有n个顶点$V_{i}$ 其中 $0\leq i<n$. 顶点为逆时针顺序.  

这要求所有的$\{P, V_{i}, V_{i+1}\}$ 也是逆时针顺序的。
``` cpp
template<typename Real>
int GetClassification(vec2<Real> const& p, int n, vec2<Real>const* v)
{
	int numPositive = 0;
	int numNegative = 0;
	int numZero = 0;
	for (int i0 = n - 1, i1 = 0; i1 < n; i0 = i1++)
	{
		vec2<Real> diff0 = p - v[i0];
		vec2<Real> diff1 = p - v[i1];
		Real dotPerp = diff0[0] * diff1[1] - diff0[1] * diff1[0];
		if (dotPerp > Real{ 0 })
		{
			++numPositive;
		}
		else if (dotPerp < Real{ 0 })
		{
			++numNegative;
		}
		else
		{
			++numZero;
		}
	}
	return (numZero == 0 ? (numPositive == n ? +1 : -1) : 0);
}


vec2<float> p(0.5, 0.5);
vec2<float> v[3];
v[0] = vec2<float>(-7.29045947e-013f, 6.29447341e-013f);
v[1] = vec2<float>(1.0f, 8.11583873e-013f);
v[2] = vec2<float>(9.37735566e-013f, 1.0f);
// the return value is 0, so p is determined to be on an edge of the 
// triangle, the function computes numPositive=2, numNegative=0 
// and numZero=1
int classifyUsingFloat = GetClassification<float>(p, 3, v);
// if rp nad rv[i] are ration representations of p and v[i] and you 
// have type ration that supports exact rational arithmetic, then
// the return value is +1, so p is actually strictly inside the triangle.
// the function computes numPositive=3, numNegative=0, and numero=0
int classifyUsingExact = GetClassification<Rational>(rp, 3, rv);
```

## [样例2](#样例2)
计算两条n维直线之间的距离。  
两个顶点$P_{0}$和$P_{1}$确定一条直线，参数表达为:  

$$P(s)=(1-s)P_{0} + sP_{1},\quad s\in \mathbf{R}$$   

第二条直线由$Q_{0}$和$Q_{1}$确定, 参数表达为:  

$$Q(t)=(1-t)Q_{0} + tQ_{1},\quad t\in \mathbf{R}$$  

两条直线上的点之间的距离的平方为:   

$$F(s,t)=\|P(s)-Q(t)\|^{2} = as^{2}-2bst+ct^{2}+2ds-et+f$$  

其中：  

$$a=\|P_{1}-P{0}\|^{2}, \quad b=(P_{1}-P_{0})\cdot(Q_{1}-Q_{0}), \quad c=\|Q_{1}-Q_{0}\|^{2}, $$   

$$d=(P_{1}-P_{0})\cdot(P_{0}-Q_{0}), \quad e=(Q_{1}-Q_{0})\cdot(P_{0}-Q_{0}), \quad f=\|P_{0}-Q_{0}\|^{2}$$  

如果$\quad ac-b^{2}=\|(P_{1}-P_{0})\times (Q_{1}-Q_{0})\|^{2}=0$ 则两条直线平行。  
如果$\quad ac-b^{2}>0$，则$F(s,t)$有全局最小值，当$\nabla F(s,t)=(0,0)$. 此时解$(\hat{s}, \hat{t})$分别代表两条直线距离最近是的参数。  
接下来求解：

$$\nabla F(s,t)=2(as-bt+d, -bs+ct-e)=(0,0)$$

即    

$$\left( \begin{array}{c} a & -b \\ -b & c\end{array} \right) \left( \begin{array}{c} s \\ t \end{array} \right) = \left( \begin{array}{c} -d \\ e \end{array} \right)$$

其解为： 

$$\left( \begin{array}{c} \hat{s} \\ \hat{t} \end{array} \right) = \frac{1}{ac-b^{2}} \left( \begin{array}{c} be-cd \\ ae-bd \end{array}\right)$$

首先用双精度进行计算：
```cpp
template<int32_t N, typename Real>
Real TestClosestPoint(const vec<N, Real>& p0, const vec<N, Real>& p1,
	                  const vec<N, Real>& q0, const vec<N, Real>& q1)
{
	vec<N, Real> p1mp0 = p1 - p0;
	vec<N, Real> q1mq0 = q1 - q0;
	vec<N, Real> p0mq0 = p0 - q0;
	Real a = p1mp0.dot(p1mp0);
	Real b = p1mp0.dot(q1mq0);
	Real c = q1mq0.dot(q1mq0);
	Real d = p1mp0.dot(p0mq0);
	Real e = q1mq0.dot(p0mq0);
	Real det = a * c - b * b;
	Real sNumber = b * e - c * d;
	Real tNumber = a * e - b * d;
	Real s = sNumber / det;
	Real t = tNumber / det;
	vec<N, Real> pclosest = (Real{ 1 } - s) * p0 + s * p1;
	vec<N, Real> qclosest = (Real{ 1 } - t) * q0 + t * q1;
	Real distance = (pclosest - qclosest).norm();
	return distance;
}

vec<3, double> p0(-1.0896217473782599, 9.7236145595088601e-007, 0.0);
vec<3, double> p1(0.91220578597858548, -9.4369829432107506e-007, 0.0);
vec<3, double> q0(-0.90010447502136237, 9.0671446351334441e-007, 0.0);
vec<3, double> q1(1.0730877178721130, -9.8185787633992740e-007, 0.0);
double dist = TestClosestPoint<3, double>(p0, p1, q0, q1);
// 0.43258687891076358
```
使用有理数计算：
```cpp
vec<3, Rational> rp0(p0[0], p0[1], p0[2]);
vec<3, Rational> rp1(p1[0], p1[1], p1[2]);
vec<3, Rational> rq0(q0[0], q0[1], q0[2]);
vec<3, Rational> rq1(q1[0], q1[1], q1[2]);
Rational dist = TestClosestPoint<3, Rational>(rp0, rp1, rq0, rq1);
double converted = (double)dist;
// 0.0
```
# [IEEE 754-2008 二进制表示](#IEEE-754-2008-二进制表示)

32位浮点数和64位浮点数是根据**IEEE 754-2008**标准进行设计的。

## [32位浮点数](#32位浮点数)

32位浮点数的二进制形式：  

![]({{ site.baseurl }}/images/apa-001.png)

第31位存储符号，**0**表示非负，**1**表示负。  
第23~30位共8位表示非负整数，$b=e+127$, $-127 \le e \le 128$    
第0~22位共23位表示尾数
```cpp
union binary32
{
	uint32_t encoding;
	float number;
};

constexpr binary32 F32_0_DOT_0{ 0u };
constexpr binary32 F32_0_DOT_5{ 1056964608u };
constexpr binary32 F32_1_DOT_0{ 1065353216u };
constexpr binary32 F32_2_DOT_0{ 1073741824u };

void test()
{
	binary32 x{};
	x.number = 1.25f;
	uint32_t s = (0x80000000 & x.encoding) >> 31;
	uint32_t b = (0x7f800000 & x.encoding) >> 23;
	uint32_t t = (0x007fffff & x.encoding);
	if (b == 0) 
	{
		if (t == 0) // zeros
		{
			// x = (-1)^s * 0 [allows for +0 and -0] 
		}
		else  //subnormal numbers
		{
			// x = (-1)^s * 0.t * 2^{-126}
		}
	}
	else if (b < 255)
	{
		// x = (-1)^s * 1.t * 2^{b-127}
	}
	else
	{
		if (t == 0)
		{
			// x = (-1)^s * infinity
		}
		else
		{
			if (t & 0x00400000)
			{
				// x = quiet NaN
			}
			else
			{
				// x = sigaling NaN
			}
			// payload = t & 0x003fffff
		}
	}

	// binary32 tb32{}; tb32.encoding = t;
	// binary32 ONE_DOT_T{};
	// ONE_DOT_T.encoding = tb32.encoding + F32_1_DOT_0.encoding;
	// float z = ((s%2==0)?1.f:-1.f) * (ONE_DOT_T.number) * std::powf(2.f, b - 127);
	// z = 1.25
}
```

## [64位浮点数](#64位浮点数)

64位浮点数的二进制形式：  

![]({{ site.baseurl }}/images/apa-002.png)

第63位存储符号，0表示非负，1表示负。
第52~62位共11位表示非负整数，$b=e+1023$, $-1023 \le e \le 1024$   
第0~51位共52位表示尾数
```cpp
union binary64
{
	uint64_t encoding;
	double number;
};

constexpr binary64 F64_0_DOT_0{ 0lu };
constexpr binary64 F64_0_DOT_5{ 4602678819172646912lu };
constexpr binary64 F64_1_DOT_0{ 4607182418800017408lu };
constexpr binary64 F64_2_DOT_0{ 4611686018427387904lu };

void test()
{
	binary64 x{};
	x.number = 1.25;
	uint64_t s = (0x8000000000000000 & x.encoding) >> 63;
	uint64_t b = (0x7ff0000000000000 & x.encoding) >> 52;
	uint64_t t = (0x000fffffffffffff & x.encoding);
	if (b == 0)
	{
		if (t == 0) // zeros
		{
			// x = (-1)^s * 0 [allows for +0 and -0]
		}
		else // subnormal numbers
		{
			// x = (-1)^s * 0.t * 2^{-1022}
		}
	}
	else if (b < 2047) // normal numbers
	{
		// x = (-1)^s * 1.t * 2^{b-1023}
		binary64 ONE_DOT_T{};
		ONE_DOT_T.encoding = tb64.encoding + F64_1_DOT_0.encoding;
		double z = ((s % 2 == 0) ? 1.0 : -1.0) * (ONE_DOT_T.number) * std::pow(2.0, b - 1023);
		std::cout << z << std::endl;
	}
	else // special numbers
	{
		if (t == 0)
		{
			// x = (-1)^s * infinity
		}
		else
		{
			if (t & 0x0008000000000000)
			{
				// x = quiet NaN
			}
			else
			{
				// x = signaling NaN
			}
			// payload = t & 0x0007ffffffffffff
		}
	}

	// binary64 tb64{}; tb64.encoding = t;
	// binary64 ONE_DOT_T{};
	// ONE_DOT_T.encoding = tb64.encoding + F64_1_DOT_0.encoding;
	// double z = ((s % 2 == 0) ? 1.0 : -1.0) * (ONE_DOT_T.number) * std::pow(2.0, b - 1023);
	// z = 1.25
}
```

# [二进制科学计数](#二进制科学计数)

一个正数的二进制科学计数(Binary Scientific Numbers)表示为下面形式:   

$$r=1.c*2^{p}=(1+\sum_{i=0}^{n-1}c_{i}2^{-(i+1)})2^{p}$$

其中$c=c0...c_{n-1}$有n位, $p$是整数。如果$c$有$\infty$位，则$r$可表示所有正实数。



