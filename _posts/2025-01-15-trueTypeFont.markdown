---
layout: post
title:  字体表达(true type font)
date:   2025-01-15 15:30:00 +0300
tags:   PrimitiveGeometry
description:  参数曲线
---

# [简介](#简介)

文档链接：https://developer.apple.com/fonts/TrueType-Reference-Manual/   

1. 这是Apple Computer推出的数字字体格式，目前已被广泛使用；     
2. 可在计算机屏幕和打印机上提供最高质量的显示，无需依赖分辨率；

# [点](#点)

字体的最低层级数据是网格上的点序列。两个点表示一条直线，增加一个额外点就可以表示一条参数曲线，改变点的位置就可以改变曲线形状。    

这里有三个点$p_{0}, p_{1}, p_{2}$定义一条二阶Bezier曲线：  

$$p(t)=(1-t)^{2}p_{0}+2t(1-t)p_{1}+t^{2}p_{2}$$  

如下图所示：
![]({{ site.baseurl }}/images/ttf-001.png)

这三个点分为曲线上的点和曲线外的点，两个端点在曲线上，中间的控制点在曲线外。    

更复杂的曲线可以用多段二次曲线连接起来，这些曲线在连接处保证连续和切向量方向一致。
如下图：

![]({{ site.baseurl }}/images/ttf-002.png)

点$p_{2}$并非定义曲线所必须的，它的存在是隐含的，可以其它点的数据得到它的位置。下图是去掉后的曲线。

![]({{ site.baseurl }}/images/ttf-003.png)

通过组合曲线和直线，可以构建复杂的字形。曲线上的点表示为实心点，曲线外的点表示为空心点。   

![]({{ site.baseurl }}/images/ttf-004.png)

# [轮廓](#轮廓)

相对简单的字形(如上图字母c)，用点序列合成起来形成封闭的形状，称为轮廓。复杂的字形(如下图字母B)，点序列定义了三个不同的封闭形状，每一个都是一个轮廓。

![]({{ site.baseurl }}/images/ttf-005.png)

从这个例子可以得出，字形可以有零个或多个轮廓。

# [轮廓的方向](#轮廓的方向)

1. 轮廓中的点必须按顺序排列;         
2. 第一个轮廓的起始点为0;     
3. 后续轮廓将从第一个未使用的数字开始;     
4. 必须能按照字体文件中指定的顺序沿轮廓从一个点到另一个点来追踪每个轮廓;      
5. 点的顺序决定了轮廓的方向;   
6. 轮廓的方向用于确定轮廓定义的形状被填充为黑色或白色。

## [区分字形的内部和外部](#区分字形的内部和外部)

规则如下：    
1. 绕数非零的点为与字形内部。所有其它点位于字形外部。

绕数计算方法如下：   
1. 从所讨论的点向无穷远处画一条射线(射线方向不重要)。
2. 从零计数开始。
3. 每次字形轮廓从右到左或从下到上穿过射线时，计数加一(这种称on-transition，因为TrueType扫描转换器从左到右、从下到上进行扫描)。     
4. 每次字形轮廓从左到右或从上到下穿过射线时，计数减一(这种称为off-transition)。    
5. 如果最终计数不为零，则该点为内部点，否则为外部点。

on-transition如下：

![]({{ site.baseurl }}/images/ttf-006.png)

off-transition如下：

![]({{ site.baseurl }}/images/ttf-007.png)

判读内外例子如下：    

1. 点$p_{1},p_{4}$ 有非零绕数，为内点。   
2. 点$p_{2}$ 先后经历了off-transition和on-transition，为外点。    
3. 点$p_{3}$ 为外点。
4. 点$p_{5}$ 为内点。

![]({{ site.baseurl }}/images/ttf-008.png)

# [轮廓相交](#轮廓相交)

TrueType允许两个轮廓相交。此功能在描述字母Q时非常方便，这时使用非零绕数来确定填充。当将黑色填充放置到其它黑色填充上时，黑色填充区域将保持黑色。  

![]({{ site.baseurl }}/images/ttf-009.png)

# [复合字形](#复合字形)

复合字形由多个基本字形组成。为了方便相对于基本字形放置附加字形，必须提供一个字形的偏移量信息。复合字形的每个字形都可以按不同量缩放。

# [主网格](#主网格)

构成字形轮廓规范的点位于一个网格上，该网格的单位不可分割，其大小由字体创建者定义。     

网格是一个二维坐标系统，x轴是水平方向，y轴是竖直方向。网格原点坐标为$(0, 0)$.    

网格不是无限平面，每个点的坐标必须在-16384和+16383之间。
在创建字形轮廓时，字体创建者会使用一个假想的正方形，这个正方形就是字体绘制的画板。每个画板上的小单元格数量越多，表示的字体也就越精细。Apple的核心字体时在2048分辨率上设计的。    

下图表示了两种分辨率的网格。    

![]({{ site.baseurl }}/images/ttf-010.png)

# [字形与网格](#字形与网格)

定义字形形状的坐标决定了字形相对于坐标网格的位置。虽然没有正式要求字形与网格具有一致的关系，但实际上，应用程序依赖于某些约定来帮助文本布局。       

在罗马字体中，由于需要水平布局，因此$y=0$通常对应于字体的基线，x坐标没有标准含义，如果字体制造商选择标准含义，应用程序将受益匪浅。      

一种常见的惯例是将字形原点放置在字形左边缘的值等于左半边距的位置，也可将字形的美学中心放置在x轴上。

下图，字体左边缘位于原点。

![]({{ site.baseurl }}/images/ttf-011.png)

下图，字体美学中心位于原点。

![]({{ site.baseurl }}/images/ttf-012.png)

非罗马字体。  

![]({{ site.baseurl }}/images/ttf-013.png)

数学符号。

![]({{ site.baseurl }}/images/ttf-014.png)

